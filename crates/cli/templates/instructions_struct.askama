{%- if instruction.requires_imports %}
use super::super::types::*;
{%- endif %}
{% raw %}
use solana_indexer_core::{IndexerDeserialize, borsh};
{% endraw %}

#[derive(IndexerDeserialize, Debug, serde::Serialize, serde::Deserialize, PartialEq, Eq, Clone, Hash)]
#[indexer(discriminator = "{{ instruction.discriminator }}")]
pub struct {{ instruction.struct_name }}{
    {%- for arg in instruction.args %}
    pub {{ arg.name }}: {{ arg.rust_type }},
    {%- endfor %}
}

pub struct {{ instruction.struct_name }}InstructionAccounts {
    {%- for account in instruction.accounts %}
    pub {{ account.name }}: solana_sdk::pubkey::Pubkey,
    {%- endfor %}
}

impl solana_indexer_core::deserialize::ArrangeAccounts for {{ instruction.struct_name }} {
    type ArrangedAccounts = {{ instruction.struct_name }}InstructionAccounts;

    fn arrange_accounts(accounts: Vec<solana_sdk::instruction::AccountMeta>) -> Option<Self::ArrangedAccounts> {
        {%- for i in (0..instruction.accounts.len()) %}
        let {{ instruction.accounts[i].name }} = accounts.get({{ i }})?;
        {%- endfor %}

        Some({{ instruction.struct_name }}InstructionAccounts {
            {%- for account in instruction.accounts %}
            {{ account.name }}: {{ account.name }}.pubkey,
            {%- endfor %}
        })
    }
}
